"""
Auth token provider
"""
type AuthTokenType {
  """
  Access JWT token
  """
  access: String!

  """
  CSRF protection token
  """
  csrf: String!

  """
  JWT token for refreshing access token
  """
  refresh: String!
}

"""
General type for image
"""
type ImageType {
  """
  Image url
  """
  filepath: String

  """
  Image blob id
  """
  id: String!
}

type Mutation {
  """
  Sign in a user
  """
  userSignIn(input: UserSignInInput!): AuthTokenType!

  """
  Sign out a user
  """
  userSignOut: SignOutType

  """
  Sign up a user
  """
  userSignUp(input: UserSignUpInput!): AuthTokenType!
}

"""
An object with an ID to support global identification.
"""
interface Node {
  """
  Globally unique identifier.
  """
  id: ID!
}

type Query {
  """
  Get current user
  """
  me: UserAccountType!
}

"""
User sign out
"""
type SignOutType {
  """
  will return true if the user log out
  """
  completed: Boolean
}

"""
User account
"""
type UserAccountType implements Node {
  """
  Email of user account
  """
  email: String!

  """
  Globally unique identifier.
  """
  id: ID!

  """
  User account's profile
  """
  userProfile: UserProfileType
}

"""
User profile
"""
type UserProfileType implements Node {
  """
  User's avatar image type
  """
  avatar: ImageType!

  """
  User's first name
  """
  firstName: String!

  """
  User's full name
  """
  fullName: String!

  """
  Globally unique identifier.
  """
  id: ID!

  """
  User's last name
  """
  lastName: String!
}

"""
Sign in user via email
"""
input UserSignInInput {
  """
  User's account email
  """
  email: String!

  """
  User's account password
  """
  password: String!
}

"""
Sign up user via email
"""
input UserSignUpInput {
  """
  User's account email
  """
  email: String!

  """
  User's first name
  """
  firstName: String!

  """
  User's last name
  """
  lastName: String!

  """
  User's account password
  """
  password: String!

  """
  User's account password confirmation
  """
  passwordConfirmation: String!
}